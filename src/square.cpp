#include "square.h"

void Square::init()
{
    const GLfloat vertex_buffer_data[] = {
        1.000000, -0.050000, 1.000000,
        -1.000000, -0.050000, -1.000000,
        1.000000, -0.050000, -1.000000,

        -1.000000, 0.050000, -1.000000,
        1.000000, 0.050000, 1.000001,
        1.000000, 0.050000, -1.000000,

        1.000000, 0.050000, -1.000000,
        1.000000, -0.050000, 1.000000,
        1.000000, -0.050000, -1.000000,

        1.000000, 0.050000, 1.000001,
        -1.000000, -0.050000, 1.000000,
        1.000000, -0.050000, 1.000000,

        -1.000000, 0.050000, 1.000000,
        -1.000000, -0.050000, -1.000000,
        -1.000000, -0.050000, 1.000000,

        1.000000, -0.050000, -1.000000,
        -1.000000, 0.050000, -1.000000,
        1.000000, 0.050000, -1.000000,

        1.000000, -0.050000, 1.000000,
        -1.000000, -0.050000, 1.000000,
        -1.000000, -0.050000, -1.000000,

        -1.000000, 0.050000, -1.000000,
        -1.000000, 0.050000, 1.000000,
        1.000000, 0.050000, 1.000001,

        1.000000, 0.050000, -1.000000,
        1.000000, 0.050000, 1.000001,
        1.000000, -0.050000, 1.000000,

        1.000000, 0.050000, 1.000001,
        -1.000000, 0.050000, 1.000000,
        -1.000000, -0.050000, 1.000000,

        -1.000000, 0.050000, 1.000000,
        -1.000000, 0.050000, -1.000000,
        -1.000000, -0.050000, -1.000000,

        1.000000, -0.050000, -1.000000,
        -1.000000, -0.050000, -1.000000,
        -1.000000, 0.050000, -1.000000,
    };

    this->object = create3DObject(GL_TRIANGLES, 12*3, vertex_buffer_data, .75, .25, .35, GL_FILL);
}

void Square::draw() {
    if (this->object == NULL) return;
    Matrices.model = glm::mat4(1.0f);
    glm::mat4 translate = glm::translate (this->position);        // glTranslatef
    Matrices.model *= translate;
    glm::mat4 MVP = VP * Matrices.model;
    glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
    draw3DObject(this->object);
}

void Square::set_position(float x, float y, float z) {
    this->position = glm::vec3(x, y, z);
}
